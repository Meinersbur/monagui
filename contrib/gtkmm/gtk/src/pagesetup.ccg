/* Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtk/gtkpagesetup.h>
#include <gtk/gtktypebuiltins.h>

namespace Gtk
{

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<PageSetup> PageSetup::create_from_key_file(const Glib::KeyFile& key_file)
#else
Glib::RefPtr<PageSetup> PageSetup::create_from_key_file(const Glib::KeyFile& key_file, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  Glib::RefPtr<PageSetup> result = PageSetup::create();

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  result->load_from_key_file(key_file);
  #else
  result->load_from_key_file(key_file, error);
  #endif //GLIBMM_EXCEPTIONS_ENABLED

  return result;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<PageSetup> PageSetup::create_from_key_file(const Glib::KeyFile& key_file, const Glib::ustring& group_name)
#else
Glib::RefPtr<PageSetup> PageSetup::create_from_key_file(const Glib::KeyFile& key_file, const Glib::ustring& group_name, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  Glib::RefPtr<PageSetup> result = PageSetup::create();

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  result->load_from_key_file(key_file, group_name);
  #else
  result->load_from_key_file(key_file, group_name, error);
  #endif //GLIBMM_EXCEPTIONS_ENABLED

  return result;
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<PageSetup> PageSetup::create_from_file(const std::string& file_name)
#else
Glib::RefPtr<PageSetup> PageSetup::create_from_file(const std::string& file_name, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  Glib::RefPtr<PageSetup> result = PageSetup::create();

  #ifdef GLIBMM_EXCEPTIONS_ENABLED
  result->load_from_file(file_name);
  #else
  result->load_from_file(file_name, error);
  #endif //GLIBMM_EXCEPTIONS_ENABLED

  return result;
}

#ifndef GTKMM_DISABLE_DEPRECATED
void PageSetup::save_to_key_file(Glib::KeyFile& key_file)
{
  gtk_page_setup_to_key_file(gobj(), (key_file).gobj(), 0); 
}
#endif //GTKMM_DISABLE_DEPRECATED

void PageSetup::save_to_key_file(Glib::KeyFile& key_file) const
{
  gtk_page_setup_to_key_file(const_cast<GtkPageSetup*>(gobj()), (key_file).gobj(), 0); 
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool PageSetup::load_from_key_file(const Glib::KeyFile& key_file)
#else
bool PageSetup::load_from_key_file(const Glib::KeyFile& key_file, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  bool retvalue = gtk_page_setup_load_key_file(gobj(), const_cast<GKeyFile*>((key_file).gobj()), NULL, &(gerror));
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  return retvalue;
}

} //namespace
