// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/sourcemark.h>
#include <gtksourceviewmm/private/sourcemark_p.h>

/* sourcemark.hg
 *
 * Copyright (C)2008 Jonathon Jongsma
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksourceview/gtksourcemark.h>

namespace gtksourceview
{

//This is custom implemented because the C _new() function specifies an extra left-gravity property:
SourceMark::SourceMark(const Glib::ustring& category, const Glib::ustring& name)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::TextMark(Glib::ConstructParams(sourcemark_class_.init(), "name",(name.empty() ? NULL : name.c_str()),"category",category.c_str(),"left-gravity",TRUE, static_cast<char*>(0)))
{}


Glib::RefPtr<SourceMark> SourceMark::next()
{
  Glib::RefPtr<SourceMark> result = Glib::wrap (gtk_source_mark_next(const_cast<GtkSourceMark*>(gobj()), NULL));
  result->reference();
  return result;
}

Glib::RefPtr<const SourceMark> SourceMark::next() const
{
  Glib::RefPtr<const SourceMark> result = Glib::wrap (gtk_source_mark_next(const_cast<GtkSourceMark*>(gobj()), NULL));
  result->reference();
  return result;
}

Glib::RefPtr<SourceMark> SourceMark::prev()
{
  Glib::RefPtr<SourceMark> result =  Glib::wrap (gtk_source_mark_prev(const_cast<GtkSourceMark*>(gobj()), NULL));
  result->reference();
  return result;
}

Glib::RefPtr<const SourceMark> SourceMark::prev() const
{
  Glib::RefPtr<const SourceMark> result =  Glib::wrap (gtk_source_mark_prev(const_cast<GtkSourceMark*>(gobj()), NULL));
  result->reference();
  return result;
}


} //namespace gtksourceview


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<gtksourceview::SourceMark> wrap(GtkSourceMark* object, bool take_copy)
{
  return Glib::RefPtr<gtksourceview::SourceMark>( dynamic_cast<gtksourceview::SourceMark*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace gtksourceview
{


/* The *_Class implementation: */

const Glib::Class& SourceMark_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SourceMark_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_mark_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}

void SourceMark_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* SourceMark_Class::wrap_new(GObject* object)
{
  return new SourceMark((GtkSourceMark*)object);
}


/* The implementation: */

GtkSourceMark* SourceMark::gobj_copy()
{
  reference();
  return gobj();
}

SourceMark::SourceMark(const Glib::ConstructParams& construct_params)
:
  Gtk::TextMark(construct_params)
{

}

SourceMark::SourceMark(GtkSourceMark* castitem)
:
  Gtk::TextMark((GtkTextMark*)(castitem))
{}

SourceMark::~SourceMark()
{}


SourceMark::CppClassType SourceMark::sourcemark_class_; // initialize static member

GType SourceMark::get_type()
{
  return sourcemark_class_.init().get_type();
}

GType SourceMark::get_base_type()
{
  return gtk_source_mark_get_type();
}


SourceMark::SourceMark()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::TextMark(Glib::ConstructParams(sourcemark_class_.init()))
{
  

}

Glib::RefPtr<SourceMark> SourceMark::create(const Glib::ustring& category, const Glib::ustring& name)
{
  return Glib::RefPtr<SourceMark>( new SourceMark(category, name) );
}
Glib::ustring SourceMark::get_category() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_source_mark_get_category(const_cast<GtkSourceMark*>(gobj())));
}

Glib::RefPtr<SourceMark> SourceMark::next(const Glib::ustring& category)
{

  Glib::RefPtr<SourceMark> retvalue = Glib::wrap(gtk_source_mark_next(gobj(), category.c_str()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const SourceMark> SourceMark::next(const Glib::ustring& category) const
{
  return const_cast<SourceMark*>(this)->next(category);
}

Glib::RefPtr<SourceMark> SourceMark::prev(const Glib::ustring& category)
{

  Glib::RefPtr<SourceMark> retvalue = Glib::wrap(gtk_source_mark_prev(gobj(), category.c_str()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;

}

Glib::RefPtr<const SourceMark> SourceMark::prev(const Glib::ustring& category) const
{
  return const_cast<SourceMark*>(this)->prev(category);
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly<Glib::ustring> SourceMark::property_category() const
{
  return Glib::PropertyProxy_ReadOnly<Glib::ustring>(this, "category");
}
#endif //GLIBMM_PROPERTIES_ENABLED


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace gtksourceview


