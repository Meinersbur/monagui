// Generated by gtkmmproc -- DO NOT MODIFY!


#include <gtksourceviewmm/sourcestyle.h>
#include <gtksourceviewmm/private/sourcestyle_p.h>

/* sourcestyles.hg
 *
 * Copyright (C) 2007 The gtksourceviewmm team.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gtksourceview/gtksourcestyle.h>
#include <cstring>

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<gtksourceview::SourceStyle> wrap(GtkSourceStyle* object, bool take_copy)
{
  return Glib::RefPtr<gtksourceview::SourceStyle>( dynamic_cast<gtksourceview::SourceStyle*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace gtksourceview
{


/* The *_Class implementation: */

const Glib::Class& SourceStyle_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &SourceStyle_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_source_style_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}

void SourceStyle_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
}

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


Glib::ObjectBase* SourceStyle_Class::wrap_new(GObject* object)
{
  return new SourceStyle((GtkSourceStyle*)object);
}


/* The implementation: */

GtkSourceStyle* SourceStyle::gobj_copy()
{
  reference();
  return gobj();
}

SourceStyle::SourceStyle(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

SourceStyle::SourceStyle(GtkSourceStyle* castitem)
:
  Glib::Object((GObject*)(castitem))
{}

SourceStyle::~SourceStyle()
{}


SourceStyle::CppClassType SourceStyle::sourcestyle_class_; // initialize static member

GType SourceStyle::get_type()
{
  return sourcestyle_class_.init().get_type();
}

GType SourceStyle::get_base_type()
{
  return gtk_source_style_get_type();
}


Glib::RefPtr<SourceStyle> SourceStyle::copy() const
{
  return Glib::wrap(gtk_source_style_copy(const_cast<GtkSourceStyle*>(gobj())));
}


#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED

#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED


} // namespace gtksourceview


