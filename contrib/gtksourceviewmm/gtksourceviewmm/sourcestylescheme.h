// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKSOURCEVIEWMM_SOURCESTYLESCHEME_H
#define _GTKSOURCEVIEWMM_SOURCESTYLESCHEME_H


#include <glibmm.h>

/* sourcestylescheme.hg
 * 
 * Copyright (C) 2004-2005 Jae Jang
 * Copyright (C) 2005-2006 Rob Page
 * Copyright (C)2006 Dodji Seketeli
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/// \file
/// \brief SourceStyleScheme class

#include <glibmm/interface.h>
#include <gtksourceviewmm/sourcestyle.h>
#include <gtksourceview/gtksourcestylescheme.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSourceStyleScheme GtkSourceStyleScheme;
typedef struct _GtkSourceStyleSchemeClass GtkSourceStyleSchemeClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace gtksourceview
{ class SourceStyleScheme_Class; } // namespace gtksourceview
namespace gtksourceview
{

/// \brief the styling properties applicable to a SourceLanguage.

class SourceStyleScheme : public Glib::Interface
{

    
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef SourceStyleScheme CppObjectType;
  typedef SourceStyleScheme_Class CppClassType;
  typedef GtkSourceStyleScheme BaseObjectType;
  typedef GTypeInterface BaseClassType;

private:
  friend class SourceStyleScheme_Class;
  static CppClassType sourcestylescheme_class_;

  // noncopyable
  SourceStyleScheme(const SourceStyleScheme&);
  SourceStyleScheme& operator=(const SourceStyleScheme&);

protected:
  SourceStyleScheme(); // you must derive from this class

  /** Called by constructors of derived classes. Provide the result of 
   * the Class init() function to ensure that it is properly 
   * initialized.
   * 
   * @param interface_class The Class object for the derived type.
   */
  explicit SourceStyleScheme(const Glib::Interface_Class& interface_class);

public:
  // This is public so that C++ wrapper instances can be
  // created for C instances of unwrapped types.
  // For instance, if an unexpected C type implements the C interface. 
  explicit SourceStyleScheme(GtkSourceStyleScheme* castitem);

protected:
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~SourceStyleScheme();

  static void add_interface(GType gtype_implementer);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GtkSourceStyleScheme*       gobj()       { return reinterpret_cast<GtkSourceStyleScheme*>(gobject_); }

  ///Provides access to the underlying C GObject.  
  const GtkSourceStyleScheme* gobj() const { return reinterpret_cast<GtkSourceStyleScheme*>(gobject_); }

private:


public:

  
  /** 
   * @return  @a scheme id.
   * 
   * Since: 2.0.
   */
  Glib::ustring get_id() const;
  
  /** 
   * @return  @a scheme name.
   * 
   * Since: 2.0.
   */
  Glib::ustring get_name() const;
  
  /** 
   * @return  @a scheme description (if defined) or <tt>0</tt>.
   * 
   * Since: 2.0.
   */
  Glib::ustring get_description() const;

 
  /** 
   * @return A <tt>0</tt>-terminated array containing the @a scheme authors or
   * <tt>0</tt> if no author is specified by the style
   * scheme.
   * 
   * Since: 2.0.
   */
  Glib::StringArrayHandle get_authors() const;

  
  /** 
   * @return  @a scheme file name if the scheme was created parsing a
   * style scheme file or <tt>0</tt> in the other cases.
   * 
   * Since: 2.0.
   */
  std::string get_filename() const;

  
  /** 
   * @param style_id Id of the style to retrieve.
   * @return Style which corresponds to @a style_id in the @a scheme,
   * or <tt>0</tt> when no style with this name found. It is owned by @a scheme
   * and may not be unref'ed.
   * 
   * Since: 2.0.
   */
  Glib::RefPtr<SourceStyle> get_style(const Glib::ustring& style_id);
  
  /** 
   * @param style_id Id of the style to retrieve.
   * @return Style which corresponds to @a style_id in the @a scheme,
   * or <tt>0</tt> when no style with this name found. It is owned by @a scheme
   * and may not be unref'ed.
   * 
   * Since: 2.0.
   */
  Glib::RefPtr<const SourceStyle> get_style(const Glib::ustring& style_id) const;


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


};//end class SourceStyleScheme

}//end namespace gtksourceview


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates gtksourceview::SourceStyleScheme
   */
  Glib::RefPtr<gtksourceview::SourceStyleScheme> wrap(GtkSourceStyleScheme* object, bool take_copy = false);

} // namespace Glib


#endif /* _GTKSOURCEVIEWMM_SOURCESTYLESCHEME_H */

